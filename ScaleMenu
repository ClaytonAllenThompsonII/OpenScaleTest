
//We use this at startup and for the configuration menu
//Saves us a few dozen bytes
void displaySystemHeader(void)
{
  
  Serial.print(F("\r\nSerial Load Cell Converter version "));
  Serial.println(F(FIRMWARE_VERSION));
  Serial.println(F("By SparkFun Electronics"));
  Serial.println(F("Cost Curve.ai - Sense the world, compute to understand, take action "));

}

//Configure how OpenScale operates
void system_setup(void)
{
  while (1)
  {
    displaySystemHeader(); //Product title and firmware version

    
    Serial.println(F("System Configuration"));

     // Print Menu: Tare line
    Serial.print(F("1) Tare scale to zero ["));
    Serial.print(setting_tare_point);
    Serial.println(F("]"));

    // Print Menu: Calibration option
    Serial.print(F("2) Calibrate scale ["));
    Serial.print(setting_calibration_factor);
    Serial.println(F("]"));

    // Print Menu: Timestamp
    Serial.print(F("3) Timestamp [O"));
    if (setting_timestamp_enable == true) Serial.print(F("n"));
    else Serial.print(F("ff"));
    Serial.println(F("]"));

    // Print Menu: Set Report rate
    /*Serial.print(F("4) Set report rate ["));
    Serial.print(setting_report_rate);
    Serial.println(F("]"));*/

    // Print Menu: Set Buad Rate
    /*Serial.print(F("5) Set baud rate ["));
    Serial.print(setting_uart_speed);
    Serial.println(F(" bps]"));*/

    // Print Menu: Change Unit of Measurement
    Serial.print(F("6) Change units of measure ["));
    if (setting_units == UNITS_KG) Serial.print(F("kg"));
    if (setting_units == UNITS_LBS) Serial.print(F("lbs"));
    Serial.println(F("]"));

    // Print Menu: Change Number of decimals. 
    Serial.print(F("7) Decimals ["));
    Serial.print(setting_decimal_places);
    Serial.println(F("]"));

    // Print Menu: Average Amount -- This should be pre-set. 
    /*Serial.print(F("8) Average amount ["));
    Serial.print(setting_average_amount);
    Serial.println(F("]"));*/
    
    // More Menu Options - All of these can either be pre-set or excluded as features. 
    /*
    Serial.print(F("9) Local temp [O"));
    if (setting_local_temp_enable == true) Serial.print(F("n"));
    else Serial.print(F("ff"));
    Serial.println(F("]"));

    Serial.print(F("r) Remote temp [O"));
    if (setting_remote_temp_enable == true) Serial.print(F("n"));
    else Serial.print(F("ff"));
    Serial.println(F("]"));

    Serial.print(F("s) Status LED ["));
    if (setting_status_enable == true) Serial.print(F("Blink"));
    else Serial.print(F("Off"));
    Serial.println(F("]"));

    Serial.print(F("q) Raw reading [O"));
    if (setting_raw_reading_enable == true) Serial.print(F("n"));
    else Serial.print(F("ff"));
    Serial.println(F("]")); */

    Serial.print(F("t) Serial trigger [O"));
    if (setting_serial_trigger_enable == true) Serial.print(F("n"));
    else Serial.print(F("ff"));
    Serial.println(F("]"));

    Serial.print(F("c) Trigger character: ["));
    Serial.print(setting_trigger_character);
    Serial.print(F(" / '"));
    Serial.write(setting_trigger_character);
    Serial.println(F("']"));


    Serial.println(F("x) Exit"));
    Serial.print(F(">"));

      //Read command
    while (!Serial.available()) ; //Wait for user to type a character
    char command = Serial.read();